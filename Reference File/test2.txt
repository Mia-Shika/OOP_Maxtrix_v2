#include "raylib.h"
#include <string>
#include <vector>

int main() {
    // Initialization
    const int screenWidth = 800;
    const int screenHeight = 450;
    
    InitWindow(screenWidth, screenHeight, "Store Input Numbers into Array and Display");

    // Variables to store input
    std::string inputNumber = "";
    std::vector<int> numbersArray;  // Dynamic array to store numbers
    bool numberEntered = false;

    SetTargetFPS(60);   // Set the game to run at 60 frames-per-second

    while (!WindowShouldClose()) {
        // Main Logic
        BeginDrawing();
        ClearBackground(RAYWHITE);

        // Input prompt
        DrawText("Enter a number (Press Enter to store, Backspace to delete):", 50, 50, 20, DARKGRAY);

        // Get input from keyboard
        int key = GetKeyPressed();
        
        // Handle numeric input (0-9)
        if (key >= 48 && key <= 57) {  // ASCII codes for '0' to '9'
            inputNumber += (char)key;
        }

        // Handle Enter key to confirm input and store the number
        if (key == KEY_ENTER && !inputNumber.empty()) {
            int enteredNumber = std::stoi(inputNumber);  // Convert input string to integer
            numbersArray.push_back(enteredNumber);  // Store the number in the array
            inputNumber = "";  // Clear the input for the next number
            numberEntered = true;
        }

        // Handle Backspace to delete the last digit
        if (key == KEY_BACKSPACE && !inputNumber.empty()) {
            inputNumber.pop_back();  // Remove the last character
        }

        // Display the input number so far
        if (!inputNumber.empty()) {
            DrawText(("Current Input: " + inputNumber).c_str(), 50, 100, 30, BLACK);
        }

        // Display stored numbers from the array
        DrawText("Stored Numbers:", 50, 200, 20, DARKGRAY);
        for (int i = 0; i < numbersArray.size(); i++) {
            DrawText(TextFormat("%d", numbersArray[i]), 50, 230 + i * 30, 20, DARKBLUE);
        }

        EndDrawing();
    }

    CloseWindow();  // Close window and OpenGL context
    return 0;
}
