#include <Identifiers.h>

int main()
{
    //Default input_box size.

    //default_input_box_size.x = 70.0f;
    //default_input_box_size.y = 50.0f;

    InitWindow(screenWidth, screenHeight, "Test_1");
  
    //Defind the address for each box.
    Numbers box[2], box_2, box_3, box_4, box_5, box_6, box_7, box_8, box_9;
    
    //Define box to register numbers
    Rectangle number_box_1 = {screenWidth/2.0f - 300, 100, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_2 = {screenWidth/2.0f - 300, 200, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_3 = {screenWidth/2.0f - 170, 100, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_4 = {screenWidth/2.0f - 170, 200, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_5 = {screenWidth/2.0f - 300, 300, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_6 = {screenWidth/2.0f - 170, 300, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_7 = {screenWidth/2.0f - 40, 100, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_8 = {screenWidth/2.0f - 40, 200, default_input_box_size.x, default_input_box_size.y};
    Rectangle number_box_9 = {screenWidth/2.0f - 40, 300, default_input_box_size.x, default_input_box_size.y};
    Rectangle output_box_1 = {screenWidth/2.0f - 300, 600, default_input_box_size.x, default_input_box_size.y};

    SetTargetFPS(60);

    while (!WindowShouldClose())
    {
        //Update
        if(CheckCollisionPointRec(GetMousePosition(), number_box_1)) box[1].Mouse_Over_Box = true;
        else box[1].Mouse_Over_Box = false;
        
        if(CheckCollisionPointRec(GetMousePosition(), number_box_2)) box[2].Mouse_Over_Box = true;
        else box[2].Mouse_Over_Box = false;

        if(CheckCollisionPointRec(GetMousePosition(), number_box_3)) box_3.Mouse_Over_Box = true;
        else box_3.Mouse_Over_Box = false;

        if(CheckCollisionPointRec(GetMousePosition(), number_box_4)) box_4.Mouse_Over_Box = true;
        else box_4.Mouse_Over_Box = false;
        
        if(CheckCollisionPointRec(GetMousePosition(), number_box_5)) box_5.Mouse_Over_Box = true;
        else box_5.Mouse_Over_Box = false;

        if(CheckCollisionPointRec(GetMousePosition(), number_box_6)) box_6.Mouse_Over_Box = true;
        else box_6.Mouse_Over_Box = false;  

        if(CheckCollisionPointRec(GetMousePosition(), number_box_7)) box_7.Mouse_Over_Box = true;
        else box_7.Mouse_Over_Box = false; 
                
        if(CheckCollisionPointRec(GetMousePosition(), number_box_8)) box_8.Mouse_Over_Box = true;
        else box_8.Mouse_Over_Box = false;

        if(CheckCollisionPointRec(GetMousePosition(), number_box_9)) box_9.Mouse_Over_Box = true;
        else box_9.Mouse_Over_Box = false;
        


        //Main logic
        BeginDrawing();
        ClearBackground(RAYWHITE);

        //Interactive Items.
        //(Box1)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_1, GRAY);
        if(box_1.Mouse_Over_Box)
        {
            DrawRectangleRec( number_box_1, LIGHTGRAY);
            if (IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_1.Clicked_Uppon = 2;
        }
        if(box_1.Clicked_Uppon == 2)
        {
            DrawRectangleRec( number_box_1, LIGHTGRAY);

            //Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_1.inputNumber += (char)key;
            }

            //Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_1.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_1.inputNumber);  // Convert input string to integer
                box_1.numbersArray.push_back(enteredNumber);  // Store the number in the array
                // box_1.inputNumber = "";  // Clear the input for the next number (redundent)
                box_1.numberEntered = true;
                box_1.Clicked_Uppon = 0;
            }
            
            //Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_1.inputNumber.empty()) 
            {
                box_1.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_1.inputNumber.empty()) box_1.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_1.numbersArray.size(); i++) 
            { 
                std::cout << box_1.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        }
        // Display the input number so far
        if (!box_1.inputNumber.empty()) {
        DrawText((box_1.inputNumber).c_str(), number_box_1.x + 10, number_box_1.y + 13, number_Size, BLACK);
        }

        //(Box2)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_2, GRAY);
        if(box_2.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_2, LIGHTGRAY);
            if (IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_2.Clicked_Uppon = 2;
        }
        if(box_2.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_2, LIGHTGRAY);

            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_2.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_2.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_2.inputNumber);  // Convert input string to integer
                box_2.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_2.inputNumber = "";  // Clear the input for the next number (redundent)
                box_2.numberEntered = true;
                box_2.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_2.inputNumber.empty()) 
            {
                box_2.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_2.inputNumber.empty()) box_2.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_2.numbersArray.size(); i++) 
            { 
                std::cout << box_2.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_2.inputNumber.empty()) {
        DrawText((box_2.inputNumber).c_str(), number_box_2.x + 10, number_box_2.y + 13, number_Size, BLACK);
        }

        //(Box3)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_3, GRAY);
        if(box_3.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_3, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_3.Clicked_Uppon = 2;
        }
        if(box_3.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_3, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_3.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_3.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_3.inputNumber);  // Convert input string to integer
                box_3.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_2.inputNumber = "";  // Clear the input for the next number (redundent)
                box_3.numberEntered = true;
                box_3.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_3.inputNumber.empty()) 
            {
                box_3.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_3.inputNumber.empty()) box_3.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_3.numbersArray.size(); i++) 
            { 
                std::cout << box_3.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_3.inputNumber.empty()) {
        DrawText((box_3.inputNumber).c_str(), number_box_3.x + 10, number_box_3.y + 13, number_Size, BLACK);
        }

        //(Box4)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_4, GRAY);
        if(box_4.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_4, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_4.Clicked_Uppon = 2;
        }
        if(box_4.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_4, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_4.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_4.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_4.inputNumber);  // Convert input string to integer
                box_4.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_2.inputNumber = "";  // Clear the input for the next number (redundent)
                box_4.numberEntered = true;
                box_4.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_4.inputNumber.empty()) 
            {
                box_4.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_4.inputNumber.empty()) box_4.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_4.numbersArray.size(); i++) 
            { 
                std::cout << box_4.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_4.inputNumber.empty()) {
        DrawText((box_4.inputNumber).c_str(), number_box_4.x + 10, number_box_4.y + 13, number_Size, BLACK);
        }

        //(Box5)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_5, GRAY);
        if(box_5.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_5, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_5.Clicked_Uppon = 2;
        }
        if(box_5.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_5, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_5.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_5.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_5.inputNumber);  // Convert input string to integer
                box_5.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_2.inputNumber = "";  // Clear the input for the next number (redundent)
                box_5.numberEntered = true;
                box_5.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_5.inputNumber.empty()) 
            {
                box_5.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_5.inputNumber.empty()) box_5.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_5.numbersArray.size(); i++) 
            { 
                std::cout << box_5.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_5.inputNumber.empty()) {
        DrawText((box_5.inputNumber).c_str(), number_box_5.x + 10, number_box_5.y + 13, number_Size, BLACK);
        }
        
        //(Box6)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_6, GRAY);
        if(box_6.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_6, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_6.Clicked_Uppon = 2;
        }
        if(box_6.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_6, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_6.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_6.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_6.inputNumber);  // Convert input string to integer
                box_6.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_.inputNumber = "";  // Clear the input for the next number (redundent)
                box_6.numberEntered = true;
                box_6.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_6.inputNumber.empty()) 
            {
                box_6.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_6.inputNumber.empty()) box_6.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_6.numbersArray.size(); i++) 
            { 
                std::cout << box_6.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_6.inputNumber.empty()) {
        DrawText((box_6.inputNumber).c_str(), number_box_6.x + 10, number_box_6.y + 13, number_Size, BLACK);
        }
        
        //(Box7)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_7, GRAY);
        if(box_7.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_7, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_7.Clicked_Uppon = 2;
        }
        if(box_7.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_7, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_7.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_7.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_7.inputNumber);  // Convert input string to integer
                box_7.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_.inputNumber = "";  // Clear the input for the next number (redundent)
                box_7.numberEntered = true;
                box_7.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_7.inputNumber.empty()) 
            {
                box_7.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_7.inputNumber.empty()) box_7.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_7.numbersArray.size(); i++) 
            { 
                std::cout << box_7.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_7.inputNumber.empty()) {
        DrawText((box_7.inputNumber).c_str(), number_box_7.x + 10, number_box_7.y + 13, number_Size, BLACK);
        }

        //(Box8)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_8, GRAY);
        if(box_8.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_8, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_8.Clicked_Uppon = 2;
        }
        if(box_8.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_8, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_8.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_8.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_8.inputNumber);  // Convert input string to integer
                box_8.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_.inputNumber = "";  // Clear the input for the next number (redundent)
                box_8.numberEntered = true;
                box_8.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_8.inputNumber.empty()) 
            {
                box_8.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_8.inputNumber.empty()) box_8.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_8.numbersArray.size(); i++) 
            { 
                std::cout << box_8.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_8.inputNumber.empty()) {
        DrawText((box_8.inputNumber).c_str(), number_box_8.x + 10, number_box_8.y + 13, number_Size, BLACK);
        }

        //(Box9)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec( number_box_9, GRAY);
        if(box_9.Mouse_Over_Box)
        {
            DrawRectangleRec(number_box_9, LIGHTGRAY);
            if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) box_9.Clicked_Uppon = 2;
        }
        if(box_9.Clicked_Uppon == 2)
        {
            DrawRectangleRec(number_box_9, LIGHTGRAY);
            // Get input from keyboard
            int key = GetKeyPressed();
            // Handle numeric input (0-9)
            if (key >= 48 && key <= 57)  // ASCII codes for '0' to '9'
            {  
                box_9.inputNumber += (char)key;
            }

            // Handle Enter key to confirm input and store the number
            if (key == KEY_ENTER && !box_9.inputNumber.empty()) 
            {
                int enteredNumber = std::stoi(box_9.inputNumber);  // Convert input string to integer
                box_9.numbersArray.push_back(enteredNumber);  // Store the number in the array
                //box_.inputNumber = "";  // Clear the input for the next number (redundent)
                box_9.numberEntered = true;
                box_9.Clicked_Uppon = 0;
            }
            // Handle Backspace to delete the last digit
            if (key == KEY_BACKSPACE && !box_9.inputNumber.empty()) 
            {
                box_9.inputNumber.pop_back();  // Remove the last character
            }
            if (key == KEY_BACKSPACE && box_9.inputNumber.empty()) box_9.numbersArray.clear();

            //Terminal troubleshooting.
            for (size_t i = 0; i < box_9.numbersArray.size(); i++) 
            { 
                std::cout << box_9.numbersArray[i] << " ";
            }
            std::cout << std::endl;
        
        }
        // Display the input number so far
        if (!box_9.inputNumber.empty()) {
        DrawText((box_9.inputNumber).c_str(), number_box_9.x + 10, number_box_9.y + 13, number_Size, BLACK);
        }

        //(Box)-----------------------------------------------------------------------------------------------------
        DrawRectangleRec(output_box_1, GRAY);
        //Addition
        float result = 0.0f; 
        if (box_1.numbersArray.size() > 0 && box_2.numbersArray.size() > 0 && box_3.numbersArray.size() > 0 && box_4.numbersArray.size() > 0)
        {
            for(size_t i = 0; i < box_1.numbersArray.size(); ++i)
            {
                result = (box_1.numbersArray[i] * box_4.numbersArray[i]) - (box_2.numbersArray[i] * box_3.numbersArray[i]); //Addition
                const char* print_out_result = floatToString(result, 2); //Turning int to string.
                DrawText(print_out_result , output_box_1.x + 10 , output_box_1.y + 13, number_Size, BLACK);
            }
        }
        EndDrawing();
    }
    CloseWindow();
    return 0;
}